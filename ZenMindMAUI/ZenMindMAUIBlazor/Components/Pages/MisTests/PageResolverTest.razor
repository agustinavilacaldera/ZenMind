@page "/resolverTest/{TestAssignmentId:int}"
@inject Controllers.ModelController model
@inject NavigationManager navman

<TituloPagina Titulo="Resolver Test" href="/misTests" />

<h4>@tests.Title</h4>
<br />
<div class="card-body">
  @pregunta.Statement
</div>

<OpcionesRespuesta Respuesta="obtenerRespuesta" />

@code {
  [Parameter]
  public int TestAssignmentId { get; set; }
  private TestAssignments testAssignments;
  private Tests tests;
  private List<Questions> listaPreguntas;
  private int idx = 0;
  private Questions pregunta;
  protected override void OnInitialized()
  {
    testAssignments = model.CargarTestAssignment(TestAssignmentId);
    tests = model.CargarTest(testAssignments.TestId);
    listaPreguntas = model.ListarQuestionPorTest(tests.Id);
    pregunta = model.CargarQuestion(listaPreguntas[idx].Id);
  }
  private void siguientePregunta()
  {
    idx++;
    if (idx >= listaPreguntas.Count)
    {
      testAssignments.Respondido = true;
      testAssignments=model.ActualizarTestAssignment(testAssignments);
      //model.notificarAlMedico(testAssignments);
      navman.NavigateTo("/misTests");
    }
    else
      pregunta = model.CargarQuestion(listaPreguntas[idx].Id);
  }
  private void obtenerRespuesta(int r)
  {
    TestFillOuts tfo = new()
      {
        Answer = r,
        QuestionsId = pregunta.Id,
        TestAssignmentId = TestAssignmentId,
        Fecha=DateTime.Today
      };
      model.ActualizarTestFillOut(tfo);
      siguientePregunta();
  }
}
